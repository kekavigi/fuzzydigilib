{"Nomor": 55955, "Judul": "SISTEM AUTOSCALING HORIZONTAL DAN VERTIKAL PADA KUBERNETES DENGAN PRIORITAS SCALING VERTIKAL", "Abstrak": "Scaling pada Kubernetes merupakan fitur yang dapat mengubah sumber daya dari\nsuatu aplikasi untuk memenuhi kebutuhan aplikasi. Saat ini tersedia dua tipe\nscaling otomatis atau autoscaling yaitu autoscaling secara horizontal dan\nautoscaling secara vertikal. Kedua tipe scaling tidak disarankan digunakan secara\nbersamaan oleh Kubernetes karena race condition yang bisa terjadi dalam\nmengubah sumber daya aplikasi. Tugas akhir ini mengusulkan implementasi\nsistem yang menggabungkan kedua tipe scaling untuk memanfaatkan kelebihan\ndan membatasi kekurangan scaling tersebut. Sistem yang dibangun\nmenggabungkan kedua tipe scaling dengan prioritas vertikal scaling yaitu\nmelakukan scaling secara horizontal untuk mengatasi beban yang berubah cepat\ndan melakukan scaling secara vertikal setelah interval tertentu untuk mengurangi\noverhead dan overprovisioning yang terjadi. Sistem menggunakan metric CPU\ndan memori dari Metrics API untuk setiap Pod pada Deployment dari Kubernetes\nuntuk melakukan perhitungan rekomendasi dan membuat perubahan terhadap\nDeployment pada Kubernetes. Sistem diuji dan dibandingkan dengan sistem\nscaling horizontal saja dan scaling vertikal saja dari Kubernetes menggunakan\nskenario beban stabil, skenario beban tidak stabil, dan skenario beban nyala-mati.\nHasil pengujian menyatakan bahwa sistem autoscaling horizontal dan vertikal\ndengan prioritas vertikal scaling mampu menangani beban meningkat dengan\nscaling horizontal dan melakukan scaling vertikal untuk mengurangi overhead\ndan over provisioning, yang terlihat pada skenario dengan beban stabil yang\nberubah sewaktu-waktu. Sistem autoscaling horizontal dan vertikal dengan\nprioritas vertikal scaling bisa memastikan penggunaan sumber daya berada pada\ntarget pemanfaatan dengan scaling, namun memiliki kekurangan pada scenario\nbeban tidak stabil dan nyala-mati karena sifat rekomendasi reaktif dan interval\nscaling yang harus diatur. Sistem juga bersifat disruptive karena Pod harus dibuat\nulang ketika sumber daya sebuah Pod diubah karena keterbatasan Kubernetes.", "Daftar File": {}, "Penulis": "Kevin Nathaniel Wijaya [13517072]", "Kontributor / Dosen Pembimbing": ["Achmad Imam Kistijantoro, S.T., M.Sc., Ph.D."], "Jenis Koleksi": "Tugas Akhir", "Penerbit": "Teknik Informatika", "Fakultas": "Sekolah Teknik Elektro dan Informatika", "Subjek": "", "Kata Kunci": "Kubernetes, scaling, prioritas vertikal.", "Sumber": "", "Staf Input/Edit": "karya", "File": "0 file", "Tanggal Input": "20 Jun 2021"}
{"Nomor": 70654, "Judul": "PERANCANGAN DAN IMPLEMENTASI PENGUJIAN FUZZ PARALEL", "Abstrak": "Keamanan perangkat lunak merupakan aspek penting dalam menentukan kualitas\nperangkat lunak sehingga aspek keamanan harus dipertimbangkan dalam proses\npengembangan perangkat lunak. Pengujian perangkat lunak dengan cara manual\nsangat menyita waktu. Terkadang proses pengujian perangkat lunak lebih lama\ndibandingkan proses pengembangan perangkat lunak. Oleh karena itu, pengujian\nsecara otomatis perlu dilakukan untuk mempersingkat waktu pengujian.\nFuzz testing (fuzzing) adalah teknik pengujian keamanan perangkat lunak secara\notomatis dengan cara mengirimkan seed atau data masukan abnormal ke program\nyang diuji. American Fuzzy Lop (AFL) adalah salah satu fuzzer yang populer saat\nini. AFL adalah grey-box fuzzer yang menggunakan teknik mutasi untuk\nmenghasilkan data masukan abnormal. Data masukan abnormal tersebut dihasilkan\noleh AFL menggunakan teknik mutasi deterministik dan non deterministik (acak).\nAFL sudah mendukung mode tunggal dan mode paralel. Pada mode paralel,\nterdapat perbedaan antara master node dan slave node terkait pembuatan data\nmasukan. Master node menggunakan mutasi deterministik dan mutasi acak\nsedangkan slave node hanya menggunakan mutasi acak. Penggunaan mutasi\ndeterministik pada kedua node mengakibatkan duplikasi data masukan sehingga\nkurang efisien dalam penggunaan sumber daya komputasi.\nPada penelitian ini, diajukan rancangan sistem untuk fuzzing paralel. Teknologi\nvirtualisasi dimanfaatkan untuk melakukan fuzzing secara paralel. Terdapat sebuah\nmaster node dan 1 atau lebih container sebagai slave node. Master node terdiri dari\naplikasi berbasis python, database dan AFL. Beberapa AFL di container digunakan\nuntuk melakukan proses fuzzing yang dikelola oleh master node. Sebuah aplikasi\nyang bertindak sebagai agen digunakan untuk mengelola sinkronisasi informasi\nantar AFL. Rancangan yang diajukan mengimplementasikan kedua teknik mutasi\ndi setiap node. Selain itu, sinkronisasi informasi seperti seed dan path coverage\ndiperlukan untuk mencegah duplikasi tugas sehingga proses fuzzing bisa lebih\nefisien dan lebih cepat untuk menemukan kecacatan atau kerentanan pada program\nyang diuji.", "Daftar File": {"COVER Bayu Mahendra": "https://digilib.itb.ac.id/gdl/download/271957", "BAB 1 Bayu Mahendra": "https://digilib.itb.ac.id/gdl/download/271958", "BAB 2 Bayu Mahendra": "https://digilib.itb.ac.id/gdl/download/271959", "BAB 3 Bayu Mahendra": "https://digilib.itb.ac.id/gdl/download/271960", "BAB 4 Bayu Mahendra": "https://digilib.itb.ac.id/gdl/download/271961", "BAB 5 Bayu Mahendra": "https://digilib.itb.ac.id/gdl/download/271962", "PUSTAKA Bayu Mahendra": "https://digilib.itb.ac.id/gdl/download/271963"}, "Penulis": "Bayu Mahendra [23218030]", "Kontributor / Dosen Pembimbing": ["Ir. Budi Rahardjo, M.Sc., Ph.D."], "Jenis Koleksi": "Tesis", "Penerbit": "Teknik Elektro", "Fakultas": "Sekolah Teknik Elektro dan Informatika", "Subjek": "", "Kata Kunci": "Keamanan perangkat lunak, fuzzing paralel, container", "Sumber": "", "Staf Input/Edit": "rikrik", "File": "7 file", "Tanggal Input": "18 Jan 2023"}
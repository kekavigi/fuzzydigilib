{"Nomor": 32537, "Judul": "Architectures for Practical Security", "Abstrak": "Few of the system architectures for security proposed for the past\nfour decades (e.g., fine-grain domains of protection, virtual\nmachines) have made a significant difference on client-side\nsecurity. In this presentation, I examine some of the reasons for\nthis and some of the lessons learned to date. Focus on client-side\nsecurity is warranted primarily because it is substantially more\ndifficult to achieve than server security in practice, since clients\ninteract with human users directly. I argue that system and\napplication partitioning to meet user security needs is now\nfeasible, and that special focus must be placed on how to design\nand implement trustworthy communication, not merely secure\nchannels, between system partitions.\nTwo forms of partitioning system and network components are\ndescribed. The first, which is inspired by Lampson\u2019s Red/Green\nseparation idea [1], partitions system resources instead of\n\u201cvirtualizing\u201d them, and switches between partitions only under\n(human) user control exercised via a trusted path. Neither\noperating systems nor applications can escape their partition or\ntransfer control to other partitions behind the user\u2019s back [2] as a\nconsequence of malware or insider attacks. Trustworthy\ncommunication among system and network partitions, which can\nbe established only via network communication, goes beyond\nfirewalls, guards and filters. The extent to which one partition\naccepts input from or outputs to another depends on the\naccountability of, and trust established with, the input provider\nand output receiver. It also depends on input-rate throttling and\noutput propagation control, which often require establishing some\ndegree of control over remote communication end points.\nThe second form of partitioning separates programmer-selected,\nsecurity-sensitive code blocks from untrusted operating system\ncode, applications and devices, and provides strong guarantees of\ndata secrecy and integrity, as well as execution integrity, to an\nexternal entity via attestation [3]. Again, the key criterion for the\nseparation and isolation of sensitive code partitions from\nuntrusted code is the ability to establish trustworthy\ncommunication between security-sensitive and untrusted code;\ne.g., the security-sensitive code accepts only input whose validity\nit can verify in its own partition, and provides output only in\nareas that are legitimately accessible to untrusted code. The\ndesign of security-sensitive code partitions relies on source code\nanalysis for modularity, where module input/output control -- not\njust security-policy isolation and code size minimization -- is a\nproperty of interest. Several applications of security-sensitive\ncode isolation are illustrated.", "Daftar File": {}, "Penulis": "VIRGIL GLIGOR [-]", "Kontributor / Dosen Pembimbing": ["-"], "Jenis Koleksi": "Jurnal elektronik", "Penerbit": "Lain-lain", "Fakultas": "", "Subjek": "Architecture", "Kata Kunci": "Architectures", "Sumber": "https://dl.acm.org/", "Staf Input/Edit": "Perpustakaan Prodi Arsitektur", "File": "1 file", "Tanggal Input": "20 Des 2018"}